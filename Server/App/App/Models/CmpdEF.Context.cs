//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace App.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Collections.Generic;
    using System.Web.Http;

    public partial class CmpdEntities : DbContext
    {
        public CmpdEntities()
            : base("name=CmpdEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }

        public virtual DbSet<EmployeeDemographic> EmployeeDemographics { get; set; }
        public virtual DbSet<OfficerShootingIncident> OfficerShootingIncidents { get; set; }
        public virtual DbSet<OfficerShootingIndividual> OfficerShootingIndividuals { get; set; }
        public virtual DbSet<OfficerShootingOfficer> OfficerShootingOfficers { get; set; }
        public virtual DbSet<TrafficStop> TrafficStops { get; set; }

        public virtual List<GetOfficerShootings_Result> GetOfficerShootings()
        {
            List<GetOfficerShootings_Result> shootings = ((IObjectContextAdapter)this).ObjectContext
                                                            .ExecuteFunction<GetOfficerShootings_Result>("GetOfficerShootings")
                                                            .ToList();

            return shootings.OrderBy(ois => DateTime.Parse(ois.YEAR_MONTH)).ToList();
        }

        

        #region Officer Involved Shooting

        public List<GetOfficerShootings_Result> GetOrderedShootings(string action, string order)
        {
            List<GetOfficerShootings_Result> shootings = GetOfficerShootings();

            switch (action)
            {
                case "id":

                    if (order == "descending")
                        shootings = shootings.OrderByDescending(osi => osi.INCIDENT_ID).ToList();
                    else
                        shootings = shootings.OrderBy(osi => osi.INCIDENT_ID).ToList();
                    break;

                case "date":

                    if (order == "descending")
                        shootings = shootings.OrderByDescending(ois => DateTime.Parse(ois.YEAR_MONTH)).ToList();
                    else
                        shootings = shootings.OrderBy(ois => DateTime.Parse(ois.YEAR_MONTH)).ToList();
                    break;

                case "officerRace":

                    if (order == "descending")
                        shootings = shootings.OrderByDescending(ois => ois.OFFICER_RACE).ToList();
                    else
                        shootings = shootings.OrderBy(ois => ois.OFFICER_RACE).ToList();
                    break;

                case "individualRace":

                    if (order == "descending")
                        shootings = shootings.OrderByDescending(ois => ois.INDIVIDUAL_RACE).ToList();
                    else
                        shootings = shootings.OrderBy(ois => ois.INDIVIDUAL_RACE).ToList();
                    break;

                case "officerExperience":

                    if (order == "descending")
                        shootings = shootings.OrderByDescending(ois => ois.OFFICER_EXPERIENCE_YEARS).ToList();
                    else
                        shootings = shootings.OrderBy(ois => ois.OFFICER_EXPERIENCE_YEARS).ToList();
                    break;

                case "individualAge":

                    if (order == "descending")
                        shootings = shootings.OrderByDescending(ois => ois.INDIVIDUAL_AGE).ToList();
                    else
                        shootings = shootings.OrderBy(ois => ois.INDIVIDUAL_AGE).ToList();
                    break;

                case "officerGender":

                    if (order == "descending")
                        shootings = shootings.OrderByDescending(ois => ois.OFFICER_GENDER).ToList();
                    else
                        shootings = shootings.OrderBy(ois => ois.OFFICER_GENDER).ToList();
                    break;

                case "injuryType":

                    if (order == "descending")
                        shootings = shootings.OrderByDescending(ois => ois.INDIVIDUAL_INJURY_TYPE).ToList();
                    else
                        shootings = shootings.OrderBy(ois => ois.INDIVIDUAL_INJURY_TYPE).ToList();
                    break;

                case "policyViolation":

                    if (order == "descending")
                        shootings = shootings.OrderByDescending(ois => ois.OFFICER_POLICY_VIOLATION).ToList();
                    else
                        shootings = shootings.OrderBy(ois => ois.OFFICER_POLICY_VIOLATION).ToList();
                    break;

            }

            return shootings;
        }

        public List<GetOfficerShootings_Result> GetOfficerShootingsInRange(DateTime? start, DateTime? end, String order)
        {
            List<GetOfficerShootings_Result> shootings = GetOfficerShootings();
            shootings = (from shooting in shootings
                    where DateTime.Parse(shooting.YEAR_MONTH) >= start && DateTime.Parse(shooting.YEAR_MONTH) <= end
                    select shooting)
                    .ToList();

            if (order.Equals("Descending"))
                return shootings.OrderByDescending(ois => DateTime.Parse(ois.YEAR_MONTH)).ToList();

            else
                return shootings;
                    
        }

        public List<GetOfficerShootings_Result> SearchOfficerShootings(
            DateTime? start,
            DateTime? end,
            String officerRace,
            String individualRace,
            int individualAgeMin,
            int individualAgeMax,
            String policyViolation,
            String injuryType,
            int officerExperienceMin,
            int officerExperienceMax,
            String officerGender,
            String individualGender)
        {
            List<GetOfficerShootings_Result> shootings = GetOfficerShootings();

            shootings = (from ois in shootings
                         where ois.INDIVIDUAL_AGE >= individualAgeMin && ois.INDIVIDUAL_AGE <= individualAgeMax &&
                               ois.OFFICER_EXPERIENCE_YEARS >= officerExperienceMin && ois.OFFICER_EXPERIENCE_YEARS <= officerExperienceMax
                         select ois)
                        .ToList();

            if (start != null && end != null)
                shootings = GetOfficerShootingsInRange(start, end, "Ascending");

            if (officerRace != null)
                shootings = shootings.Where(ois => ois.OFFICER_RACE.ToLower() == officerRace.ToLower()).ToList();

            if (individualRace != null)
                shootings = shootings.Where(ois => ois.INDIVIDUAL_RACE.ToLower() == individualRace.ToLower()).ToList();

            if (policyViolation != null)
                shootings = shootings.Where(ois => ois.OFFICER_POLICY_VIOLATION.ToLower() == policyViolation.ToLower()).ToList();

            if (injuryType != null)
                shootings = shootings.Where(ois => ois.INDIVIDUAL_INJURY_TYPE.ToLower() == injuryType.ToLower()).ToList();

            if (officerGender != null)
                shootings = shootings.Where(ois => ois.OFFICER_GENDER.ToLower() == officerGender.ToLower()).ToList();

            if (individualGender != null)
                shootings = shootings.Where(ois => ois.INDIVIDUAL_GENDER.ToLower() == individualGender.ToLower()).ToList();

            return shootings;
        }
        #endregion

        #region Traffic Stops

        public List<TrafficStop> OrderedTrafficStops(String action, String order)
        {

            List<TrafficStop> stops = TrafficStops.ToList();

            switch (action)
            {
                case ("id"):

                    if (order == "descending")
                        stops = stops.OrderByDescending(stop => stop.ObjectID).ToList();
                    else
                        stops = stops.OrderBy(stop => stop.ObjectID).ToList();
                    break;


                case ("date"):

                    if (order == "descending")
                        stops = stops.OrderByDescending(stop => stop.Stop_Date).ToList();
                    else
                        stops = stops.OrderBy(stop => stop.Stop_Date).ToList();
                    break;


                case ("reason"):

                    if (order == "descending")
                        stops = stops.OrderByDescending(stop => stop.Reason_for_Stop).ToList();
                    else
                        stops = stops.OrderBy(stop => stop.Reason_for_Stop).ToList();
                    break;

                case ("officerRace"):

                    if (order == "descending")
                        stops = stops.OrderByDescending(stop => stop.Officer_Race).ToList();
                    else
                        stops = stops.OrderBy(stop => stop.Officer_Race).ToList();
                    break;


                case ("officerGender"):

                    if (order == "descending")
                        stops = stops.OrderByDescending(stop => stop.Officer_Gender).ToList();
                    else
                        stops = stops.OrderBy(stop => stop.Officer_Gender).ToList();
                    break;


                case ("experience"):

                    if (order == "descending")
                        stops = stops.OrderByDescending(stop => stop.Officer_Years_of_Service).ToList();
                    else
                        stops = stops.OrderBy(stop => stop.Officer_Years_of_Service).ToList();
                    break;


                case ("driverRace"):

                    if (order == "descending")
                        stops = stops.OrderByDescending(stop => stop.Driver_Race).ToList();
                    else
                        stops = stops.OrderBy(stop => stop.Driver_Race).ToList();
                    break;


                case ("driverGender"):

                    if (order == "descending")
                        stops = stops.OrderByDescending(stop => stop.Driver_Gender).ToList();
                    else
                        stops = stops.OrderBy(stop => stop.Driver_Gender).ToList();
                    break;


                case ("driverAge"):

                    if (order == "descending")
                        stops = stops.OrderByDescending(stop => stop.Driver_Age).ToList();
                    else
                        stops = stops.OrderBy(stop => stop.Driver_Age).ToList();
                    break;


                case ("search"):

                    if (order == "descending")
                        stops = stops.OrderByDescending(stop => stop.Was_a_Search_Conducted).ToList();
                    else
                        stops = stops.OrderBy(stop => stop.Was_a_Search_Conducted).ToList();
                    break;

                case ("result"):

                    if (order == "descending")
                        stops = stops.OrderByDescending(stop => stop.Result_of_Stop).ToList();
                    else
                        stops = stops.OrderBy(stop => stop.Result_of_Stop).ToList();
                    break;


                case ("division"):

                if (order == "descending")
                        stops = stops.OrderByDescending(stop => stop.CMPD_Division).ToList();
                    else
                        stops = stops.OrderBy(stop => stop.CMPD_Division).ToList();
                    break;
            }

            return stops;
        }

        public List<TrafficStop> SearchTrafficStops(
            DateTime? startDate,
            DateTime? endDate,
            String reason,
            String officerRace,
            String officerGender,
            int? experienceMin,
            int? experienceMax,
            String driverRace,
            String driverGender,
            int? driverAgeMin,
            int? driverAgeMax,
            String search,
            String result,
            String division)
        {
            List<TrafficStop> stops = TrafficStops.ToList();

            if (startDate != null && endDate != null)
                stops = stops.Where(stop => startDate >= stop.Stop_Date && endDate <= stop.Stop_Date).ToList();

            if (reason != null)
                stops = stops.Where(stop => reason.ToLower() == stop.Reason_for_Stop.ToLower()).ToList();

            if (officerRace != null)
                stops = stops.Where(stop => officerRace.ToLower() == stop.Officer_Race.ToLower()).ToList();

            if (officerGender != null)
                stops = stops.Where(stop => officerGender.ToLower() == stop.Officer_Gender.ToLower()).ToList();

            if (experienceMin != null && experienceMax != null)
                stops = stops.Where(stop => experienceMin <= stop.Officer_Years_of_Service && experienceMax >= stop.Officer_Years_of_Service).ToList();

            if (driverRace != null)
                stops = stops.Where(stop => driverRace.ToLower() == stop.Driver_Race.ToLower()).ToList();

            if (driverGender != null)
                stops = stops.Where(stop => driverGender.ToLower() == stop.Driver_Gender.ToLower()).ToList();

            if (driverAgeMin != null && driverAgeMax != null)
                stops = stops.Where(stop => driverAgeMin <= stop.Driver_Age && driverAgeMax >= stop.Driver_Age).ToList();

            if (search != null)
                stops = stops.Where(stop => search.ToLower() == stop.Was_a_Search_Conducted.ToLower()).ToList();

            if (result != null)
                stops = stops.Where(stop => result.ToLower() == stop.Result_of_Stop.ToLower()).ToList();

            if (division != null)
                stops = stops.Where(stop => division.ToLower() == stop.CMPD_Division.ToLower()).ToList();

            return stops;
        }
        #endregion

        #region Employee Demographics

        public List<EmployeeDemographic> OrderByDemographics(String action, String order)
        {

            List<EmployeeDemographic> officers = EmployeeDemographics.ToList();
            switch (action)
            {
                case ("title"):

                    if (order == "descending")
                        officers = officers.OrderByDescending(officer => officer.JOB_TITLE).ToList();
                    else
                        officers = officers.OrderByDescending(officer => officer.JOB_TITLE).ToList();
                    break;

                case ("experience"):

                    if (order == "descending")
                        officers = officers.OrderByDescending(officer => officer.Years_Of_Service).ToList();
                    else
                        officers = officers.OrderByDescending(officer => officer.Years_Of_Service).ToList();
                    break;

                case ("age"):

                    if (order == "descending")
                        officers = officers.OrderByDescending(officer => officer.Age).ToList();
                    else
                        officers = officers.OrderByDescending(officer => officer.Age).ToList();
                    break;

                case ("gender"):

                    if (order == "descending")
                        officers = officers.OrderByDescending(officer => officer.Gender).ToList();
                    else
                        officers = officers.OrderByDescending(officer => officer.Gender).ToList();
                    break;


                case ("race"):

                    if (order == "descending")
                        officers = officers.OrderByDescending(officer => officer.Race).ToList();
                    else
                        officers = officers.OrderByDescending(officer => officer.Race).ToList();
                    break;
            }

            return officers;
        }

        public List<EmployeeDemographic> SearchEmployeeDemographics(
            String title,
            int? experienceMin,
            int? experienceMax,
            int? ageMin,
            int? ageMax,
            String gender,
            String race)
        {
            List<EmployeeDemographic> officers = EmployeeDemographics.ToList();

            if (title != null)
                officers = officers.Where(officer => title.ToLower() == officer.JOB_TITLE.ToLower()).ToList();

            if (experienceMin != null && experienceMax != null)
                officers = officers.Where(officer => experienceMin <= officer.Years_Of_Service && experienceMax >= officer.Years_Of_Service).ToList();

            if (ageMin != null && ageMax != null)
                officers = officers.Where(officer => ageMin <= officer.Age && ageMax >= officer.Age).ToList();

            if (gender != null)
                officers = officers.Where(officer => gender.ToLower() == officer.Gender.ToLower()).ToList();

            if (race != null)
                officers = officers.Where(officer => race.ToLower() == officer.Race.ToLower()).ToList();


            return officers;
        }

        

        #endregion

    }

}
